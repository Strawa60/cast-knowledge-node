@using System.Globalization
@using CastKnowledgeWebApp.Ontology
@using Newtonsoft.Json
@model CastKnowledgeWebApp.Ontology.OwlCollection
        
<script type="text/javascript">
(function() {
                jsPlumb.ready(function() {

                    var instance = jsPlumb.getInstance({
                        // default drag options
                        DragOptions: { cursor: 'pointer', zIndex: 2000 }, // the overlays to decorate each connection with.  note that the label overlay uses a function to generate the label text; in this
                        // case it returns the 'labelText' member that we set on each connection in the 'init' method below.
                        ConnectionOverlays: [
                            ["Arrow", { location: 1 }], [
                                "Label", {
                                    location: 0.1,
                                    id: "label",
                                    cssClass: "aLabel"
                                }
                            ]
                        ],
                        Container: "drag-drop"
                    }); // this is the paint style for the connecting lines..

                    // double click on any connection 
                    //instance.bind("dblclick", function(connection, originalEvent) { alert("double click on connection from " + connection.sourceId + " to " + connection.targetId); });
                    instance.bind("click", function(conn, originalEvent) {
                        if (confirm("Delete connection from " + conn.sourceId + " to " + conn.targetId + "?"))
                            jsPlumb.detach(conn); 
                    });	
                    var connectorPaintStyle = {
                            lineWidth: 4,
                            strokeStyle: "#61B7CF",
                            joinstyle: "round",
                            outlineColor: "white",
                            outlineWidth: 2
                        }, // .. and this is the hover style. 
                        connectorHoverStyle = {
                            lineWidth: 4,
                            strokeStyle: "#216477",
                            outlineWidth: 2,
                            outlineColor: "white"
                        },
                        endpointHoverStyle = {
                            fillStyle: "#216477",
                            strokeStyle: "#216477"
                        }, // the definition of source endpoints (the small blue ones)
                        sourceEndpoint = {
                            endpoint: "Dot",
                            paintStyle: {
                                strokeStyle: "#61B7CF",
                                fillStyle: "transparent",
                                radius: 7,
                                lineWidth: 3
                            },
                            isSource: true,
                            isTarget: true,
                            connector: ["Flowchart", { stub: [40, 60], gap: 10, cornerRadius: 5, alwaysRespectStubs: true }],
                            connectorStyle: connectorPaintStyle,
                            hoverPaintStyle: endpointHoverStyle,
                            connectorHoverStyle: connectorHoverStyle,
                            maxConnections: 666,
                            dragOptions: {},
                            overlays: [
                                [
                                    "Label", {
                                        location: [0.5, 1.5],
                                        cssClass: "endpointSourceLabel"
                                    }
                                ]
                            ]
                        }, // the definition of target endpoints (will appear when the user drags a connection) 
                        targetEndpoint = {
                            endpoint: "Dot",
                            paintStyle: {
                                strokeStyle: "#61B7CF",
                                fillStyle: "transparent",
                                radius: 7,
                                lineWidth: 3
                            },
                            isSource: true,
                            isTarget: true,
                            connector: ["Flowchart", { stub: [40, 60], gap: 10, cornerRadius: 5, alwaysRespectStubs: true }],
                            connectorStyle: connectorPaintStyle,
                            hoverPaintStyle: endpointHoverStyle,
                            connectorHoverStyle: connectorHoverStyle,
                            maxConnections: 666,
                            dragOptions: {},
                            overlays: [
                                [
                                    "Label", {
                                        location: [0.5, 1.5],
                                        cssClass: "endpointSourceLabel"
                                    }
                                ]
                            ]
                        },
                        init = function(connection) {
                            connection.getOverlay("label").setLabel(connection.sourceId.substring(15) + "-" + connection.targetId.substring(15));
                            connection.bind("editCompleted", function(o) {
                                if (typeof console != "undefined")
                                    console.log("connection edited. path is now ", o.path);
                            });
                        };
                    var _addEndpoints = function(toId, sourceAnchors, targetAnchors) {
                        for (var i = 0; i < sourceAnchors.length; i++) {
                            var sourceUUID = toId + sourceAnchors[i];
                            instance.addEndpoint(toId, sourceEndpoint, { anchor: sourceAnchors[i], uuid: sourceUUID });
                        }
                        for (var j = 0; j < targetAnchors.length; j++) {
                            var targetUUID = toId + targetAnchors[j];
                            instance.addEndpoint(toId, targetEndpoint, { anchor: targetAnchors[j], uuid: targetUUID });
                        }

                    }; // suspend drawing and initialise.
                    instance.doWhileSuspended(function() { // bind to connection/connectionDetached events, and update the list of connections on screen.
                        instance.bind("connection", function(info, originalEvent) {
                            updateConnections(info.connection);
                        });
                        instance.bind("connectionDetached", function(info, originalEvent) {
                            updateConnections(info.connection, true);
                        }); // configure some drop options for use by all endpoints.
                        var exampleDropOptions = {
                            tolerance: "touch",
                            hoverClass: "dropHover",
                            activeClass: "dragActive"
                        }; // make .window divs draggable
                        instance.draggable(jsPlumb.getSelector(".drag-drop .window"));
                        //dodanie pukntow
                        var javaScriptClassCollection = @Html.Raw(Json.Encode(Model.OwlClassCollection));
                        for (var i = 0; i < javaScriptClassCollection.length; i++)
                        {
                            _addEndpoints(javaScriptClassCollection[i].className, ["TopCenter", "BottomCenter"], ["LeftMiddle", "RightMiddle"]);
                            if (javaScriptClassCollection[i].isSubClassOf != null) {
                                

                            }
                        }
                       
                        //dodanie polaczen
                        //instance.connect({ uuids: ["block 1BottomCenter", "block 2TopCenter"], editable: true });

                        var javaScriptObjectPropertyCollection = @Html.Raw(Json.Encode(Model.OwlObjPropertyCollection));
                        for (var j = 0; j < javaScriptObjectPropertyCollection.length; j++)
                        {
                            var sourceNumber = Math.floor(Math.random() * (2 - 0)) + 0;
                            var targetNumber = Math.floor(Math.random() * (2 - 0)) + 0;
                            var source="BottomCenter";
                            var target="TopCenter";
                            switch (sourceNumber) {
                                case 0:
                                {
                                    source = "TopCenter";
                                    break;
                                }
                                //case 1:
                                //    {
                                //        source = "LeftMiddle";
                                //    break;
                                //}
                                //case 2:
                                //    {
                                //        source = "RightMiddle";
                                //    break;
                                //}
                                case 1:
                                    {
                                        source = "BottomCenter";
                                    break;
                                }
                                
                                default:
                                {
                                    break;
                                }
                            }
                            switch (targetNumber) {
                                //case 0:
                                //    {
                                //        target = "TopCenter";
                                //        break;
                                //    }
                                case 0:
                                    {
                                        target = "LeftMiddle";
                                        break;
                                    }
                                case 1:
                                    {
                                        target = "RightMiddle";
                                        break;
                                    }
                                //case 3:
                                //    {
                                //        target = "BottomCenter";
                                //        break;
                                //    }
                                
                                default:
                                    {
                                        break;
                                    }
                            }
                            

                            var connectionLabelObj= instance.connect({ uuids: [javaScriptObjectPropertyCollection[j].domain+source, javaScriptObjectPropertyCollection[j].range+target], editable: false });
                            connectionLabelObj.setLabel(javaScriptObjectPropertyCollection[j].objPropertyName);
                        }

                        for (var k = 0; k < javaScriptClassCollection.length; k++)
                        {
                            if (javaScriptClassCollection[k].isSubClassOf != null) {
                            var sourceNumber = Math.floor(Math.random() * (2 - 0)) + 0;
                            var targetNumber = Math.floor(Math.random() * (4 - 0)) + 0;
                            var source="BottomCenter";
                            var target="TopCenter";
                            switch (sourceNumber) {
                                //case 0:
                                //    {
                                //        source = "TopCenter";
                                //        break;
                                //    }
                                case 1:
                                    {
                                        source = "LeftMiddle";
                                        break;
                                    }
                                case 0:
                                    {
                                        source = "RightMiddle";
                                        break;
                                    }
                                //case 3:
                                //    {
                                //        source = "BottomCenter";
                                //        break;
                                //    }
                                
                                default:
                                    {
                                        break;
                                    }
                            }
                            switch (targetNumber) {
                                case 0:
                                    {
                                        target = "TopCenter";
                                        break;
                                    }
                                case 1:
                                    {
                                        target = "LeftMiddle";
                                        break;
                                    }
                                case 2:
                                    {
                                        target = "RightMiddle";
                                        break;
                                    }
                                case 3:
                                    {
                                        target = "BottomCenter";
                                        break;
                                    }
                                
                                default:
                                    {
                                        break;
                                    }
                            }
                            var connectionLabelClass= instance.connect({ uuids: [javaScriptClassCollection[k].className+source, javaScriptClassCollection[k].isSubClassOf+target], editable: true });
                                connectionLabelClass.setLabel("isSubClassOf");
                            }
                        }
                    });


                });
})();
    </script>